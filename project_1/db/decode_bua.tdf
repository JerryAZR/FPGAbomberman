--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone IV E" LPM_DECODES=16 LPM_WIDTH=4 data enable eq
--VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_lpm_compare 2018:09:12:13:04:24:SJ cbx_lpm_decode 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END


-- Copyright (C) 2018  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details.



--synthesis_resources = lut 18 
SUBDESIGN decode_bua
( 
	data[3..0]	:	input;
	enable	:	input;
	eq[15..0]	:	output;
) 
VARIABLE 
	data_wire[3..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[15..0]	: WIRE;
	eq_wire[15..0]	: WIRE;
	w_anode1202w[1..0]	: WIRE;
	w_anode1211w[3..0]	: WIRE;
	w_anode1228w[3..0]	: WIRE;
	w_anode1238w[3..0]	: WIRE;
	w_anode1248w[3..0]	: WIRE;
	w_anode1258w[3..0]	: WIRE;
	w_anode1268w[3..0]	: WIRE;
	w_anode1278w[3..0]	: WIRE;
	w_anode1288w[3..0]	: WIRE;
	w_anode1300w[1..0]	: WIRE;
	w_anode1307w[3..0]	: WIRE;
	w_anode1318w[3..0]	: WIRE;
	w_anode1328w[3..0]	: WIRE;
	w_anode1338w[3..0]	: WIRE;
	w_anode1348w[3..0]	: WIRE;
	w_anode1358w[3..0]	: WIRE;
	w_anode1368w[3..0]	: WIRE;
	w_anode1378w[3..0]	: WIRE;
	w_data1200w[2..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[15..0] = eq_wire[15..0];
	eq_wire[] = ( ( w_anode1378w[3..3], w_anode1368w[3..3], w_anode1358w[3..3], w_anode1348w[3..3], w_anode1338w[3..3], w_anode1328w[3..3], w_anode1318w[3..3], w_anode1307w[3..3]), ( w_anode1288w[3..3], w_anode1278w[3..3], w_anode1268w[3..3], w_anode1258w[3..3], w_anode1248w[3..3], w_anode1238w[3..3], w_anode1228w[3..3], w_anode1211w[3..3]));
	w_anode1202w[] = ( (w_anode1202w[0..0] & (! data_wire[3..3])), enable_wire);
	w_anode1211w[] = ( (w_anode1211w[2..2] & (! w_data1200w[2..2])), (w_anode1211w[1..1] & (! w_data1200w[1..1])), (w_anode1211w[0..0] & (! w_data1200w[0..0])), w_anode1202w[1..1]);
	w_anode1228w[] = ( (w_anode1228w[2..2] & (! w_data1200w[2..2])), (w_anode1228w[1..1] & (! w_data1200w[1..1])), (w_anode1228w[0..0] & w_data1200w[0..0]), w_anode1202w[1..1]);
	w_anode1238w[] = ( (w_anode1238w[2..2] & (! w_data1200w[2..2])), (w_anode1238w[1..1] & w_data1200w[1..1]), (w_anode1238w[0..0] & (! w_data1200w[0..0])), w_anode1202w[1..1]);
	w_anode1248w[] = ( (w_anode1248w[2..2] & (! w_data1200w[2..2])), (w_anode1248w[1..1] & w_data1200w[1..1]), (w_anode1248w[0..0] & w_data1200w[0..0]), w_anode1202w[1..1]);
	w_anode1258w[] = ( (w_anode1258w[2..2] & w_data1200w[2..2]), (w_anode1258w[1..1] & (! w_data1200w[1..1])), (w_anode1258w[0..0] & (! w_data1200w[0..0])), w_anode1202w[1..1]);
	w_anode1268w[] = ( (w_anode1268w[2..2] & w_data1200w[2..2]), (w_anode1268w[1..1] & (! w_data1200w[1..1])), (w_anode1268w[0..0] & w_data1200w[0..0]), w_anode1202w[1..1]);
	w_anode1278w[] = ( (w_anode1278w[2..2] & w_data1200w[2..2]), (w_anode1278w[1..1] & w_data1200w[1..1]), (w_anode1278w[0..0] & (! w_data1200w[0..0])), w_anode1202w[1..1]);
	w_anode1288w[] = ( (w_anode1288w[2..2] & w_data1200w[2..2]), (w_anode1288w[1..1] & w_data1200w[1..1]), (w_anode1288w[0..0] & w_data1200w[0..0]), w_anode1202w[1..1]);
	w_anode1300w[] = ( (w_anode1300w[0..0] & data_wire[3..3]), enable_wire);
	w_anode1307w[] = ( (w_anode1307w[2..2] & (! w_data1200w[2..2])), (w_anode1307w[1..1] & (! w_data1200w[1..1])), (w_anode1307w[0..0] & (! w_data1200w[0..0])), w_anode1300w[1..1]);
	w_anode1318w[] = ( (w_anode1318w[2..2] & (! w_data1200w[2..2])), (w_anode1318w[1..1] & (! w_data1200w[1..1])), (w_anode1318w[0..0] & w_data1200w[0..0]), w_anode1300w[1..1]);
	w_anode1328w[] = ( (w_anode1328w[2..2] & (! w_data1200w[2..2])), (w_anode1328w[1..1] & w_data1200w[1..1]), (w_anode1328w[0..0] & (! w_data1200w[0..0])), w_anode1300w[1..1]);
	w_anode1338w[] = ( (w_anode1338w[2..2] & (! w_data1200w[2..2])), (w_anode1338w[1..1] & w_data1200w[1..1]), (w_anode1338w[0..0] & w_data1200w[0..0]), w_anode1300w[1..1]);
	w_anode1348w[] = ( (w_anode1348w[2..2] & w_data1200w[2..2]), (w_anode1348w[1..1] & (! w_data1200w[1..1])), (w_anode1348w[0..0] & (! w_data1200w[0..0])), w_anode1300w[1..1]);
	w_anode1358w[] = ( (w_anode1358w[2..2] & w_data1200w[2..2]), (w_anode1358w[1..1] & (! w_data1200w[1..1])), (w_anode1358w[0..0] & w_data1200w[0..0]), w_anode1300w[1..1]);
	w_anode1368w[] = ( (w_anode1368w[2..2] & w_data1200w[2..2]), (w_anode1368w[1..1] & w_data1200w[1..1]), (w_anode1368w[0..0] & (! w_data1200w[0..0])), w_anode1300w[1..1]);
	w_anode1378w[] = ( (w_anode1378w[2..2] & w_data1200w[2..2]), (w_anode1378w[1..1] & w_data1200w[1..1]), (w_anode1378w[0..0] & w_data1200w[0..0]), w_anode1300w[1..1]);
	w_data1200w[2..0] = data_wire[2..0];
END;
--VALID FILE
